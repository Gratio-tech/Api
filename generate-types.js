#!/usr/bin/env node

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–∏–ø–æ–≤ –∏–∑ OpenAPI —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏
 * –ú–æ–∂–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –∫–∞–∫ —Å URL, —Ç–∞–∫ –∏ —Å –ª–æ–∫–∞–ª—å–Ω—ã–º–∏ —Ñ–∞–π–ª–∞–º–∏ —Å—Ö–µ–º
 *
 * –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
 * npx @gratio/api generate-types --url https://api.example.com/openapi.json
 * npx @gratio/api generate-types --file ./schema.json
 * gratio-generate-types --url https://api.example.com/openapi.json (–µ—Å–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≥–ª–æ–±–∞–ª—å–Ω–æ)
 * node generate-types.js --help
 */

const fs = require('fs');
const path = require('path');
const https = require('https');
const http = require('http');

// –ü–∞—Ä—Å–∏–Ω–≥ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
function parseArgs() {
  const args = process.argv.slice(2);
  const options = {};

  for (let i = 0; i < args.length; i++) {
    const arg = args[i];

    if (arg === '--help' || arg === '-h') {
      showHelp();
      process.exit(0);
    } else if (arg === '--url' || arg === '-u') {
      if (i + 1 >= args.length) {
        console.error('–û—à–∏–±–∫–∞: –ù–µ —É–∫–∞–∑–∞–Ω URL –ø–æ—Å–ª–µ --url');
        process.exit(1);
      }
      options.url = args[++i];
    } else if (arg === '--file' || arg === '-f') {
      if (i + 1 >= args.length) {
        console.error('–û—à–∏–±–∫–∞: –ù–µ —É–∫–∞–∑–∞–Ω –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –ø–æ—Å–ª–µ --file');
        process.exit(1);
      }
      options.file = args[++i];
    } else if (arg === '--output' || arg === '-o') {
      if (i + 1 >= args.length) {
        console.error('–û—à–∏–±–∫–∞: –ù–µ —É–∫–∞–∑–∞–Ω –ø—É—Ç—å –∫ –≤—ã—Ö–æ–¥–Ω–æ–º—É —Ñ–∞–π–ª—É –ø–æ—Å–ª–µ --output');
        process.exit(1);
      }
      options.output = args[++i];
    } else if (arg === '--format' || arg === '--fmt') {
      if (i + 1 >= args.length) {
        console.error('–û—à–∏–±–∫–∞: –ù–µ —É–∫–∞–∑–∞–Ω —Ñ–æ—Ä–º–∞—Ç –ø–æ—Å–ª–µ --format');
        process.exit(1);
      }
      options.format = args[++i];
    } else if (arg === 'generate-types') {
      // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—É generate-types –¥–ª—è npx @gratio/api generate-types
      continue;
    } else {
      console.error(`–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç: ${arg}`);
      console.log('–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ --help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø—Ä–∞–≤–∫–∏');
      process.exit(1);
    }
  }

  return options;
}

// –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É
function showHelp() {
  console.log(`–°–∫—Ä–∏–ø—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ TypeScript —Ç–∏–ø–æ–≤ –∏–∑ OpenAPI —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
  npx @gratio/api generate-types [–æ–ø—Ü–∏–∏]
  gratio-generate-types [–æ–ø—Ü–∏–∏]                    (–µ—Å–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≥–ª–æ–±–∞–ª—å–Ω–æ)
  node generate-types.js [–æ–ø—Ü–∏–∏]                   (–ª–æ–∫–∞–ª—å–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ)

–û–ø—Ü–∏–∏:
  --url, -u <URL>           URL –∫ OpenAPI —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏
  --file, -f <–ø—É—Ç—å>         –ü—É—Ç—å –∫ –ª–æ–∫–∞–ª—å–Ω–æ–º—É —Ñ–∞–π–ª—É —Å—Ö–µ–º—ã
  --output, -o <–ø—É—Ç—å>       –ü—É—Ç—å –¥–ª—è –≤—ã—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: ./generated-types.ts)
  --format, --fmt <—Ñ–æ—Ä–º–∞—Ç>  –§–æ—Ä–º–∞—Ç –≤—ã—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞: typescript, json (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: typescript)
  --help, -h                –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É

–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:

  # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑ URL (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π —Å–ø–æ—Å–æ–±)
  npx @gratio/api generate-types --url https://api.example.com/openapi.json

  # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
  npx @gratio/api generate-types --file ./api-schema.json

  # –£–∫–∞–∑–∞–Ω–∏–µ –≤—ã—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
  npx @gratio/api generate-types --url https://api.example.com/openapi.json --output ./types/api.ts

  # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)
  npx @gratio/api generate-types --file ./schema.json --format json

  # –ì–ª–æ–±–∞–ª—å–Ω–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ
  npm install -g @gratio/api
  gratio-generate-types --url https://api.example.com/openapi.json

–°–æ–≤–µ—Ç: –î–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –≤ –ø—Ä–æ–µ–∫—Ç –¥–æ–±–∞–≤—å—Ç–µ —Å–∫—Ä–∏–ø—Ç –≤ package.json:
  {
    "scripts": {
      "generate-types": "npx @gratio/api generate-types --url https://your-api.com/openapi.json"
    }
  }
`);
}

// –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ö–µ–º—ã –ø–æ URL
function fetchSchema(url) {
  return new Promise((resolve, reject) => {
    // –í–∞–ª–∏–¥–∞—Ü–∏—è URL
    try {
      new URL(url);
    } catch (error) {
      reject(new Error(`–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π URL: ${url}`));
      return;
    }

    const protocol = url.startsWith('https:') ? https : http;

    console.log(`–ó–∞–≥—Ä—É–∂–∞—é —Å—Ö–µ–º—É –∏–∑ URL: ${url}`);

    const request = protocol.get(url, (res) => {
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–¥–∏—Ä–µ–∫—Ç–æ–≤
      if (res.statusCode >= 300 && res.statusCode < 400 && res.headers.location) {
        console.log(`üîÑ –†–µ–¥–∏—Ä–µ–∫—Ç –Ω–∞: ${res.headers.location}`);
        return fetchSchema(res.headers.location).then(resolve).catch(reject);
      }

      if (res.statusCode !== 200) {
        reject(new Error(`HTTP ${res.statusCode}: ${res.statusMessage} –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ ${url}`));
        return;
      }

      let data = '';

      res.on('data', (chunk) => {
        data += chunk;
      });

      res.on('end', () => {
        try {
          const schema = JSON.parse(data);
          console.log(`‚úÖ –°—Ö–µ–º–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ (${data.length} —Å–∏–º–≤–æ–ª–æ–≤)`);
          resolve(schema);
        } catch (error) {
          reject(new Error(`–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON –∏–∑ ${url}: ${error.message}`));
        }
      });
    });

    request.on('error', (error) => {
      reject(new Error(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ö–µ–º—ã –∏–∑ ${url}: ${error.message}`));
    });

    // –¢–∞–π–º–∞—É—Ç –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
    request.setTimeout(30000, () => {
      request.destroy();
      reject(new Error(`–¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ö–µ–º—ã –∏–∑ ${url}`));
    });
  });
}

// –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ö–µ–º—ã –∏–∑ —Ñ–∞–π–ª–∞
function loadSchemaFromFile(filePath) {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
    if (!fs.existsSync(filePath)) {
      throw new Error(`–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: ${filePath}`);
    }

    const stats = fs.statSync(filePath);
    if (!stats.isFile()) {
      throw new Error(`–£–∫–∞–∑–∞–Ω–Ω—ã–π –ø—É—Ç—å –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Ñ–∞–π–ª–æ–º: ${filePath}`);
    }

    console.log(`–ó–∞–≥—Ä—É–∂–∞—é —Å—Ö–µ–º—É –∏–∑ —Ñ–∞–π–ª–∞: ${filePath}`);
    const content = fs.readFileSync(filePath, 'utf8');
    const schema = JSON.parse(content);
    console.log(`‚úÖ –°—Ö–µ–º–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∏–∑ —Ñ–∞–π–ª–∞ (${content.length} —Å–∏–º–≤–æ–ª–æ–≤)`);
    return schema;
  } catch (error) {
    if (error instanceof SyntaxError) {
      throw new Error(`–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON –≤ —Ñ–∞–π–ª–µ ${filePath}: ${error.message}`);
    }
    throw new Error(`–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞ ${filePath}: ${error.message}`);
  }
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è TypeScript —Ç–∏–ø–æ–≤
function generateTypeScriptTypes(openAPI) {
  const schemas = openAPI.components?.schemas || {};
  let typesContent = `// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ç–∏–ø—ã –∏–∑ OpenAPI —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏
// –ù–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ —ç—Ç–æ—Ç —Ñ–∞–π–ª –≤—Ä—É—á–Ω—É—é!
// –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ: ${new Date().toISOString()}
/////////////////////////////////////////////
`;

  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–∏–ø—ã –¥–ª—è –∫–∞–∂–¥–æ–π —Å—Ö–µ–º—ã
  Object.entries(schemas).forEach(([schemaName, schema]) => {
    typesContent += generateSchemaType(schemaName, schema);
    typesContent += '\n\n';
  });

  return typesContent;
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–∏–ø–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Å—Ö–µ–º—ã
function generateSchemaType(name, schema) {
  if (schema.type === 'object') {
    return generateObjectType(name, schema);
  } else if (schema.anyOf || schema.oneOf) {
    return generateUnionType(name, schema);
  } else {
    return generateBasicType(name, schema);
  }
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–∏–ø–∞ –æ–±—ä–µ–∫—Ç–∞
function generateObjectType(name, schema) {
  let typeContent = `export type ${name} = {\n`;

  if (schema.properties) {
    Object.entries(schema.properties).forEach(([propName, propSchema]) => {
      const isRequired = schema.required?.includes(propName);
      const propType = getPropertyType(propSchema);
      const optional = isRequired ? '' : '?';

      typeContent += `  ${propName}${optional}: ${propType};\n`;
    });
  }

  typeContent += '};';
  return typeContent;
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è union —Ç–∏–ø–∞
function generateUnionType(name, schema) {
  const unionTypes = [];

  if (schema.anyOf) {
    schema.anyOf.forEach(item => {
      if (item.$ref) {
        const refName = item.$ref.split('/').pop();
        unionTypes.push(refName);
      } else {
        unionTypes.push(getPropertyType(item));
      }
    });
  }

  return `export type ${name} = ${unionTypes.join(' | ')};`;
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –±–∞–∑–æ–≤–æ–≥–æ —Ç–∏–ø–∞
function generateBasicType(name, schema) {
  const type = getPropertyType(schema);
  return `export type ${name} = ${type};`;
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–∏–ø–∞ —Å–≤–æ–π—Å—Ç–≤–∞
function getPropertyType(schema) {
  if (schema.$ref) {
    return schema.$ref.split('/').pop();
  }

  switch (schema.type) {
    case 'string':
      if (schema.enum) {
        return schema.enum.map(v => `'${v}'`).join(' | ');
      }
      return 'string';
    case 'number':
    case 'integer':
      return 'number';
    case 'boolean':
      return 'boolean';
    case 'array':
      const itemType = getPropertyType(schema.items);
      return `${itemType}[]`;
    case 'object':
      return 'Record<string, any>';
    default:
      return 'any';
  }
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
async function generateTypes(options) {
  try {
    let openAPI;

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫ —Å—Ö–µ–º—ã
    if (options.url) {
      openAPI = await fetchSchema(options.url);
    } else if (options.file) {
      openAPI = loadSchemaFromFile(options.file);
    } else {
      throw new Error('–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å --url –∏–ª–∏ --file');
    }

    // –í–∞–ª–∏–¥–∞—Ü–∏—è —Å—Ö–µ–º—ã OpenAPI
    if (!openAPI || typeof openAPI !== 'object') {
      throw new Error('–ó–∞–≥—Ä—É–∂–µ–Ω–Ω–∞—è —Å—Ö–µ–º–∞ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –≤–∞–ª–∏–¥–Ω—ã–º JSON –æ–±—ä–µ–∫—Ç–æ–º');
    }

    if (!openAPI.openapi && !openAPI.swagger) {
      console.warn(' –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –°—Ö–µ–º–∞ –º–æ–∂–µ—Ç –Ω–µ –±—ã—Ç—å –≤–∞–ª–∏–¥–Ω–æ–π OpenAPI/Swagger —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–µ–π');
    }

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—É—Ç—å –¥–ª—è –≤—ã—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
    const outputPath = options.output || './generated-types.ts';

    // –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –≤—ã—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    const outputDir = path.dirname(outputPath);
    if (!fs.existsSync(outputDir)) {
      fs.mkdirSync(outputDir, { recursive: true });
      console.log(`–°–æ–∑–¥–∞–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: ${outputDir}`);
    }

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–∏–ø—ã
    let outputContent;
    if (options.format === 'json') {
      console.log('–ì–µ–Ω–µ—Ä–∏—Ä—É—é JSON —Ñ–∞–π–ª...');
      outputContent = JSON.stringify(openAPI, null, 2);
    } else {
      console.log('–ì–µ–Ω–µ—Ä–∏—Ä—É—é TypeScript —Ç–∏–ø—ã...');
      outputContent = generateTypeScriptTypes(openAPI);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–∏–ø—ã –±—ã–ª–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã
      if (!outputContent.trim()) {
        throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ç–∏–ø—ã - —Å—Ö–µ–º–∞ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤');
      }
    }

    // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ —Ñ–∞–π–ª
    fs.writeFileSync(outputPath, outputContent, 'utf8');
    const stats = fs.statSync(outputPath);
    console.log(`–¢–∏–ø—ã —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤: ${outputPath} (${stats.size} –±–∞–π—Ç)`);

    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    if (options.format !== 'json') {
      const schemas = openAPI.components?.schemas || {};
      const schemasCount = Object.keys(schemas).length;
      if (schemasCount > 0) {
        console.log(`–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ —Ç–∏–ø–æ–≤: ${schemasCount}`);
      } else {
        console.warn(' –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –í —Å—Ö–µ–º–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–π —Ç–∏–ø–æ–≤ (components.schemas)');
      }
    }

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–∏–ø–æ–≤:', error.message);
    console.error('\n –í–æ–∑–º–æ–∂–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è:');
    console.error('   - –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å URL –∏–ª–∏ –ø—É—Ç–∏ –∫ —Ñ–∞–π–ª—É');
    console.error('   - –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å—Ö–µ–º–∞ —è–≤–ª—è–µ—Ç—Å—è –≤–∞–ª–∏–¥–Ω–æ–π OpenAPI —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–µ–π');
    console.error('   - –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ç–µ–≤–æ–≥–æ —Ä–µ—Å—É—Ä—Å–∞');
    console.error('   - –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ --help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø—Ä–∞–≤–∫–∏');
    process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞
if (require.main === module) {
  const options = parseArgs();

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É–∫–∞–∑–∞–Ω —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –∏—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö
  if (!options.url && !options.file) {
    console.error('–û—à–∏–±–∫–∞: –ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö');
    console.error('–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ --url –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞ –∏–ª–∏ --file –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞');
    console.log('\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ --help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª–Ω–æ–π —Å–ø—Ä–∞–≤–∫–∏');
    process.exit(1);
  }

  // –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–æ—Ä–º–∞—Ç–∞
  if (options.format && !['typescript', 'json'].includes(options.format)) {
    console.error('–û—à–∏–±–∫–∞: –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: typescript –∏–ª–∏ json');
    process.exit(1);
  }

  generateTypes(options);
}

module.exports = {
  generateTypes,
  fetchSchema,
  loadSchemaFromFile,
  generateTypeScriptTypes
};
